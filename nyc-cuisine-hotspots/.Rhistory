)
boro_test_cuisine = "Pizza"
boro_test_clusters <- run_dbscan_by_borough(
data = restaurants_unique,
cuisine = boro_test_cuisine,
eps_values = eps_settings,
min_floor = 5,
prop_factor = 0.015
)
map_dbscan_clusters(boro_test_clusters)
conc_score_cuisine = "Latin American"
conc_clusters <- run_dbscan_by_borough(
data = restaurants_unique,
cuisine = conc_score_cuisine,
)
calc_cluster_concentration(conc_clusters)
conc_score_cuisine = "Pizza"
conc_clusters <- run_dbscan_by_borough(
data = restaurants_unique,
cuisine = conc_score_cuisine,
)
calc_cluster_concentration(conc_clusters)
conc_score_cuisine = "Russian"
conc_clusters <- run_dbscan_by_borough(
data = restaurants_unique,
cuisine = conc_score_cuisine,
)
calc_cluster_concentration(conc_clusters)
eps_settings <- c(
"Manhattan" = 0.004,
"Brooklyn/Queens" = 0.008,
"Bronx" = 0.007,
"Staten Island" = 0.009
)
boro_test_cuisine = "Latin American"
boro_test_clusters <- run_dbscan_by_borough(
data = restaurants_unique,
cuisine = boro_test_cuisine,
eps_values = eps_settings,
min_floor = 5,
prop_factor = 0.015
)
map_dbscan_clusters(boro_test_clusters)
conc_score_cuisine = "Russian"
conc_clusters <- run_dbscan_by_borough(
data = restaurants_unique,
cuisine = conc_score_cuisine,
)
boro_test_cuisine = "Latin American"
map_dbscan_clusters(conc_clusters)
calc_cluster_concentration(conc_clusters)
conc_score_cuisine = "Russian"
conc_clusters <- run_dbscan_by_borough(
data = restaurants_unique,
cuisine = conc_score_cuisine,
)
map_dbscan_clusters(conc_clusters)
calc_cluster_concentration(conc_clusters)
conc_score_cuisine = "Sandwiches"
conc_clusters <- run_dbscan_by_borough(
data = restaurants_unique,
cuisine = conc_score_cuisine,
)
map_dbscan_clusters(conc_clusters)
calc_cluster_concentration(conc_clusters)
conc_score_cuisine = "Pizza"
conc_clusters <- run_dbscan_by_borough(
data = restaurants_unique,
cuisine = conc_score_cuisine,
)
map_dbscan_clusters(conc_clusters)
calc_cluster_concentration(conc_clusters)
conc_score_cuisine = "Chinese"
conc_clusters <- run_dbscan_by_borough(
data = restaurants_unique,
cuisine = conc_score_cuisine,
)
map_dbscan_clusters(conc_clusters)
calc_cluster_concentration(conc_clusters)
conc_score_cuisine = "French"
conc_clusters <- run_dbscan_by_borough(
data = restaurants_unique,
cuisine = conc_score_cuisine,
)
map_dbscan_clusters(conc_clusters)
calc_cluster_concentration(conc_clusters)
conc_score_cuisine = "Jewish/Kosher"
conc_clusters <- run_dbscan_by_borough(
data = restaurants_unique,
cuisine = conc_score_cuisine,
)
map_dbscan_clusters(conc_clusters)
calc_cluster_concentration(conc_clusters)
conc_score_cuisine = "Donuts"
conc_clusters <- run_dbscan_by_borough(
data = restaurants_unique,
cuisine = conc_score_cuisine,
)
map_dbscan_clusters(conc_clusters)
calc_cluster_concentration(conc_clusters)
region_test2_cuisine = "Donuts"
region_test2_clusters <- run_dbscan_by_borough(
data = restaurants_unique,
cuisine = region_test2_cuisine,
eps_values = eps_settings,
prop_factor = 0.015
)
region_test2_hulls <- make_hotspot_polygons(region_test2_clusters)
map_cluster_polygons(region_test2_hulls)
region_test2_cuisine = "African"
region_test2_clusters <- run_dbscan_by_borough(
data = restaurants_unique,
cuisine = region_test2_cuisine,
eps_values = eps_settings,
prop_factor = 0.015
)
region_test2_hulls <- make_hotspot_polygons(region_test2_clusters)
map_cluster_polygons(region_test2_hulls)
conc_score_cuisine = "Italian"
conc_clusters <- run_dbscan_by_borough(
data = restaurants_unique,
cuisine = conc_score_cuisine,
)
map_dbscan_clusters(conc_clusters)
calc_cluster_concentration(conc_clusters)
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
# Load packages
library(tidyverse)
library(janitor)
library(sf)
library(dbscan)
library(tmap)
library(leaflet)
library(tidycensus)
library(tigris)
library(skimr)
library(RSocrata)
library(RColorBrewer)
library(dplyr)
library(rmapshaper)
library(purrr)
cuisine_diffusion_score <- function(resto_data){
cuisine_list <- list_cuisines(resto_data)
cuisine_diff_scores <- data.frame()
map_dfr(cuisine_list, function(cui)){
cuisine_diffusion_score <- function(resto_data){
cuisine_list <- list_cuisines(resto_data)
cuisine_diff_scores <- data.frame()
map_dfr(cuisine_list, function(cui){
this_clustering <- run_dbscan_by_borough(data=resto_data, cuisine=cui)
this_scorecard <- calc_cluster_concentration(this_clustering)
bind_cols(data.frame(cuisine = cui, stringsAsFactors = FALSE), this_scorecard)
})
return(cuisine_diff_scores)
}
get_cuisine_diffusion_score <- function(resto_data){
cuisine_list <- list_cuisines(resto_data)
cuisine_diff_scores <- data.frame()
map_dfr(cuisine_list, function(cui){
this_clustering <- run_dbscan_by_borough(data=resto_data, cuisine=cui)
this_scorecard <- calc_cluster_concentration(this_clustering)
bind_cols(data.frame(cuisine = cui, stringsAsFactors = FALSE), this_scorecard)
})
return(cuisine_diff_scores)
}
cuisine_diffusion_scores <- get_cuisine_diffusion_score(restaurants_unique)
get_cuisine_diffusion_score <- function(resto_data){
cuisine_list <- list_cuisines(resto_data)
cuisine_diff_scores <- data.frame()
map_dfr(cuisine_list, function(cui){
this_clustering <- run_dbscan_by_borough(data=resto_data, cuisine=cui)
print(cui)
this_scorecard <- calc_cluster_concentration(this_clustering)
bind_cols(data.frame(cuisine = cui, stringsAsFactors = FALSE), this_scorecard)
})
return(cuisine_diff_scores)
}
cuisine_diffusion_scores <- get_cuisine_diffusion_score(restaurants_unique)
get_cuisine_diffusion_score <- function(resto_data){
cuisine_list <- list_cuisines(resto_data)
cuisine_diff_scores <- data.frame()
map_dfr(cuisine_list, function(cui){
this_clustering <- run_dbscan_by_borough(data=resto_data, cuisine=cui)
print(cui)
print(" ")
this_scorecard <- calc_cluster_concentration(this_clustering)
bind_cols(data.frame(cuisine = cui, stringsAsFactors = FALSE), this_scorecard)
})
return(cuisine_diff_scores)
}
cuisine_diffusion_scores <- get_cuisine_diffusion_score(restaurants_unique)
get_cuisine_diffusion_score <- function(resto_data){
cuisine_list <- list_cuisines(resto_data)
cuisine_diff_scores <- data.frame()
map_dfr(cuisine_list, function(cui){
this_clustering <- run_dbscan_by_borough(data=resto_data, cuisine=cui)
print(cui)
print(" "hh)
get_cuisine_diffusion_score <- function(resto_data){
cuisine_list <- list_cuisines(resto_data)
cuisine_diff_scores <- data.frame()
map_dfr(cuisine_list, function(cui){
this_clustering <- run_dbscan_by_borough(data=resto_data, cuisine=cui)
print(cui)
print(" hh")
this_scorecard <- calc_cluster_concentration(this_clustering)
bind_cols(data.frame(cuisine = cui, stringsAsFactors = FALSE), this_scorecard)
})
return(cuisine_diff_scores)
}
cuisine_diffusion_scores <- get_cuisine_diffusion_score(restaurants_unique)
get_cuisine_diffusion_score <- function(resto_data){
cuisine_list <- list_cuisines(resto_data)
print(cuisine_list)
cuisine_diff_scores <- data.frame()
map_dfr(cuisine_list, function(cui){
this_clustering <- run_dbscan_by_borough(data=resto_data, cuisine=cui)
print(cui)
this_scorecard <- calc_cluster_concentration(this_clustering)
bind_cols(data.frame(cuisine = cui, stringsAsFactors = FALSE), this_scorecard)
})
return(cuisine_diff_scores)
}
cuisine_diffusion_scores <- get_cuisine_diffusion_score(restaurants_unique)
get_cuisine_diffusion_score <- function(resto_data){
cuisine_list <- list_cuisines(resto_data)
cuisine_diff_scores <- data.frame()
map_dfr(cuisine_list, function(cui){
this_clustering <- run_dbscan_by_borough(data=resto_data, cuisine=cui)
print(cui)
this_scorecard <- calc_cluster_concentration(this_clustering)
bind_cols(data.frame(cuisine = cui, stringsAsFactors = FALSE), this_scorecard)
})
return(cuisine_diff_scores)
}
cuisine_diffusion_scores <- get_cuisine_diffusion_score(restaurants_unique)
get_cuisine_diffusion_score <- function(resto_data){
cuisine_list <- list_cuisines(resto_data)
cuisine_diff_scores <- data.frame()
map_dfr(cuisine_list, function(cui){
this_clustering <- run_dbscan_by_borough(data=resto_data, cuisine=cui)
print(cui)
this_scorecard <- calc_cluster_concentration(this_clustering)
bind_cols(data.frame(cuisine = cui, stringsAsFactors = FALSE), this_scorecard)
})
return(cuisine_diff_scores)
}
cuisine_diffusion_scores <- get_cuisine_diffusion_score(restaurants_unique)
conc_score_cuisine <- "Southwestern"
conc_clusters <- run_dbscan_by_borough(
data = restaurants_unique,
cuisine = conc_score_cuisine,
)
map_dbscan_clusters(conc_clusters)
calc_cluster_concentration(conc_clusters)
conc_score_cuisine <- "Chilean"
conc_clusters <- run_dbscan_by_borough(
data = restaurants_unique,
cuisine = conc_score_cuisine,
)
map_dbscan_clusters(conc_clusters)
calc_cluster_concentration(conc_clusters)
conc_score_cuisine <- "Indonesian"
conc_clusters <- run_dbscan_by_borough(
data = restaurants_unique,
cuisine = conc_score_cuisine,
)
map_dbscan_clusters(conc_clusters)
calc_cluster_concentration(conc_clusters)
conc_score_cuisine <- "Italian"
conc_clusters <- run_dbscan_by_borough(
data = restaurants_unique,
cuisine = conc_score_cuisine,
)
map_dbscan_clusters(conc_clusters)
calc_cluster_concentration(conc_clusters)
calc_cluster_concentration <- function(clustered_data) {
# Keep all rows with a cluster label (0 = noise)
df <- clustered_data %>% filter(!is.na(cluster))
N  <- nrow(df)
if (N == 0) {
return(tibble(
pct_in_clusters       = 0,
largest_cluster_share = 0,
diffusion_score       = 1,
n_clusters            = 0,
pct_noise             = 1
))
}
# Counts
noise_n <- sum(df$cluster == 0, na.rm = TRUE)
clust_tbl <- df %>% filter(cluster != 0) %>% count(cluster, name = "nn")
n_clusters <- nrow(clust_tbl)
# Metrics
pct_in_clusters <- (N - noise_n) / N
largest_cluster_share <- if (n_clusters > 0) max(clust_tbl$n) / N else 0
# Proportions including noise as its own bin
props <- c(clust_tbl$n, if (noise_n > 0) noise_n else NULL) / N
# Shannon entropy (normalized). If only one non-empty bin, define as 0.
H  <- -sum(props * log(props))
m  <- length(props)
Hn <- if (m <= 1) 0 else H / log(m)
tibble(
pct_in_clusters       = pct_in_clusters,
largest_cluster_share = largest_cluster_share,
diffusion_score       = Hn,
n_clusters            = n_clusters,
pct_noise             = noise_n / N
)
}
get_cuisine_diffusion_score <- function(resto_data){
cuisine_list <- list_cuisines(resto_data)
cuisine_diff_scores <- data.frame()
map_dfr(cuisine_list, function(cui){
this_clustering <- run_dbscan_by_borough(data=resto_data, cuisine=cui)
print(cui)
this_scorecard <- calc_cluster_concentration(this_clustering)
bind_cols(data.frame(cuisine = cui, stringsAsFactors = FALSE), this_scorecard)
})
return(cuisine_diff_scores)
}
cuisine_diffusion_scores <- get_cuisine_diffusion_score(restaurants_unique)
calc_cluster_concentration <- function(clustered_data) {
# Keep all rows with a cluster label (0 = noise)
df <- clustered_data %>% filter(!is.na(cluster))
N  <- nrow(df)
if (N == 0) {
return(tibble(
pct_in_clusters       = 0,
largest_cluster_share = 0,
diffusion_score       = 1,
n_clusters            = 0,
pct_noise             = 1
))
}
# Counts
noise_n <- sum(df$cluster == 0, na.rm = TRUE)
clust_tbl <- df %>% filter(cluster != 0) %>% count(cluster, name = "ggg")
n_clusters <- nrow(clust_tbl)
# Metrics
pct_in_clusters <- (N - noise_n) / N
largest_cluster_share <- if (n_clusters > 0) max(clust_tbl$n) / N else 0
# Proportions including noise as its own bin
props <- c(clust_tbl$n, if (noise_n > 0) noise_n else NULL) / N
# Shannon entropy (normalized). If only one non-empty bin, define as 0.
H  <- -sum(props * log(props))
m  <- length(props)
Hn <- if (m <= 1) 0 else H / log(m)
tibble(
pct_in_clusters       = pct_in_clusters,
largest_cluster_share = largest_cluster_share,
diffusion_score       = Hn,
n_clusters            = n_clusters,
pct_noise             = noise_n / N
)
}
get_cuisine_diffusion_score <- function(resto_data){
cuisine_list <- list_cuisines(resto_data)
cuisine_diff_scores <- data.frame()
map_dfr(cuisine_list, function(cui){
this_clustering <- run_dbscan_by_borough(data=resto_data, cuisine=cui)
print(cui)
this_scorecard <- calc_cluster_concentration(this_clustering)
bind_cols(data.frame(cuisine = cui, stringsAsFactors = FALSE), this_scorecard)
})
return(cuisine_diff_scores)
}
cuisine_diffusion_scores <- get_cuisine_diffusion_score(restaurants_unique)
get_cuisine_diffusion_score <- function(resto_data){
cuisine_list <- list_cuisines(resto_data)$cuisine_description
cuisine_diff_scores <- data.frame()
map_dfr(cuisine_list, function(cui){
this_clustering <- run_dbscan_by_borough(data=resto_data, cuisine=cui)
print(cui)
this_scorecard <- calc_cluster_concentration(this_clustering)
bind_cols(data.frame(cuisine = cui, stringsAsFactors = FALSE), this_scorecard)
})
return(cuisine_diff_scores)
}
cuisine_diffusion_scores <- get_cuisine_diffusion_score(restaurants_unique)
get_cuisine_diffusion_score <- function(resto_data){
cuisine_list <- list_cuisines(resto_data)$cuisine_description
cuisine_diff_scores <- data.frame()
map_dfr(cuisine_list, function(cui){
this_clustering <- run_dbscan_by_borough(data=resto_data, cuisine=cui)
this_scorecard <- calc_cluster_concentration(this_clustering)
bind_cols(data.frame(cuisine = cui, stringsAsFactors = FALSE), this_scorecard)
})
return(cuisine_diff_scores)
}
cuisine_diffusion_scores <- get_cuisine_diffusion_score(restaurants_unique)
get_cuisine_diffusion_score <- function(resto_data){
cuisine_list <- list_cuisines(resto_data)$cuisine_description
cuisine_diff_scores <- data.frame()
map_dfr(cuisine_list, function(cui){
this_clustering <- run_dbscan_by_borough(data=resto_data, cuisine=cui)
this_scorecard <- calc_cluster_concentration(this_clustering)
bind_cols(data.frame(cuisine = cui, stringsAsFactors = FALSE), this_scorecard)
})
return(cuisine_diff_scores)
}
cuisine_diffusion_scores <- get_cuisine_diffusion_score(restaurants_unique)
print(cuisine_diffusion_scores)
get_cuisine_diffusion_score <- function(resto_data){
cuisine_list <- list_cuisines(resto_data)$cuisine_description
cuisine_diff_scores <- data.frame()
map_dfr(cuisine_list, function(cui){
this_clustering <- run_dbscan_by_borough(data=resto_data, cuisine=cui)
this_scorecard <- calc_cluster_concentration(this_clustering)
bind_cols(data.frame(cuisine = cui, stringsAsFactors = FALSE), this_scorecard)
})
# return(cuisine_diff_scores)
}
cuisine_diffusion_scores <- get_cuisine_diffusion_score(restaurants_unique)
print(cuisine_diffusion_scores)
calc_cluster_concentration <- function(clustered_data) {
# Keep all rows with a cluster label (0 = noise)
df <- clustered_data %>% filter(!is.na(cluster))
N  <- nrow(df)
if (N == 0) {
return(tibble(
pct_in_clusters       = 0,
largest_cluster_share = 0,
diffusion_score       = 1,
n_clusters            = 0,
pct_noise             = 1
))
}
# Counts
noise_n <- sum(df$cluster == 0, na.rm = TRUE)
clust_tbl <- df %>% filter(cluster != 0) %>% count(cluster, name = "n")
n_clusters <- nrow(clust_tbl)
# Metrics
pct_in_clusters <- (N - noise_n) / N
largest_cluster_share <- if (n_clusters > 0) max(clust_tbl$n) / N else 0
# Proportions including noise as its own bin
props <- c(clust_tbl$n, if (noise_n > 0) noise_n else NULL) / N
# Shannon entropy (normalized). If only one non-empty bin, define as 0.
H  <- -sum(props * log(props))
m  <- length(props)
Hn <- if (m <= 1) 0 else H / log(m)
tibble(
pct_in_clusters       = pct_in_clusters,
largest_cluster_share = largest_cluster_share,
diffusion_score       = Hn,
n_clusters            = n_clusters,
pct_noise             = noise_n / N
)
}
get_cuisine_diffusion_score <- function(resto_data){
cuisine_list <- list_cuisines(resto_data)$cuisine_description
cuisine_diff_scores <- data.frame()
map_dfr(cuisine_list, function(cui){
this_clustering <- run_dbscan_by_borough(data=resto_data, cuisine=cui)
this_scorecard <- calc_cluster_concentration(this_clustering)
bind_cols(data.frame(cuisine = cui, stringsAsFactors = FALSE), this_scorecard)
})
}
cuisine_diffusion_scores <- get_cuisine_diffusion_score(restaurants_unique)
print(cuisine_diffusion_scores)
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
# Load packages
library(tidyverse)
library(janitor)
library(sf)
library(dbscan)
library(tmap)
library(leaflet)
library(tidycensus)
library(tigris)
library(skimr)
library(RSocrata)
library(RColorBrewer)
library(dplyr)
library(rmapshaper)
library(purrr)
region_test1_cuisine <- "Chinese"
region_test1_clusters <- run_dbscan_by_borough(
data = restaurants_unique,
cuisine = region_test1_cuisine,
eps_values = eps_settings,
prop_factor = 0.015
)
region_test1_hulls <- make_hotspot_polygons(region_test1_clusters)
map_cluster_polygons(region_test1_hulls)
region_test2_cuisine <- "African"
region_test2_clusters <- run_dbscan_by_borough(
data = restaurants_unique,
cuisine = region_test2_cuisine,
eps_values = eps_settings,
prop_factor = 0.015
)
region_test2_hulls <- make_hotspot_polygons(region_test2_clusters)
map_cluster_polygons(region_test2_hulls)
region_test2_cuisine <- "Japanese"
region_test2_clusters <- run_dbscan_by_borough(
data = restaurants_unique,
cuisine = region_test2_cuisine,
eps_values = eps_settings,
prop_factor = 0.015
)
region_test2_hulls <- make_hotspot_polygons(region_test2_clusters)
map_cluster_polygons(region_test2_hulls)
region_test2_cuisine <- "African"
region_test2_clusters <- run_dbscan_by_borough(
data = restaurants_unique,
cuisine = region_test2_cuisine,
eps_values = eps_settings,
prop_factor = 0.015
)
region_test2_hulls <- make_hotspot_polygons(region_test2_clusters)
map_cluster_polygons(region_test2_hulls)
